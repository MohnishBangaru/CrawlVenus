#!/usr/bin/env python3
"""
Interactive API Key Setup Script

This script helps users set up their API keys for AA_VA-Phi.
"""

import os
import sys
from pathlib import Path
import getpass

def create_env_file():
    """Create or update .env file with API keys."""
    
    print("üîë AA_VA-Phi API Key Setup")
    print("="*40)
    print()
    print("This script will help you set up your API keys.")
    print("You can skip any API key if you don't want to use that service.")
    print()
    
    # Get the project root
    project_root = Path(__file__).parent.parent
    env_file = project_root / ".env"
    
    # Check if .env file exists
    existing_keys = {}
    if env_file.exists():
        print(f"üìÅ Found existing .env file: {env_file}")
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    existing_keys[key.strip()] = value.strip()
        print(f"   Found {len(existing_keys)} existing keys")
        print()
    
    # Collect API keys
    api_keys = {}
    
    # OpenAI API Key
    print("ü§ñ OpenAI API Key")
    print("   Required for: GPT-4 action generation, fallback AI processing")
    print("   Get one at: https://platform.openai.com/api-keys")
    if 'OPENAI_API_KEY' in existing_keys:
        print(f"   Current: {existing_keys['OPENAI_API_KEY'][:10]}...")
        use_existing = input("   Use existing key? (y/n): ").lower().strip()
        if use_existing == 'y':
            api_keys['OPENAI_API_KEY'] = existing_keys['OPENAI_API_KEY']
        else:
            api_keys['OPENAI_API_KEY'] = getpass.getpass("   Enter OpenAI API Key (or press Enter to skip): ").strip()
    else:
        api_keys['OPENAI_API_KEY'] = getpass.getpass("   Enter OpenAI API Key (or press Enter to skip): ").strip()
    print()
    
    # Phi Ground Configuration (optional)
    print("üß† Phi Ground Configuration")
    print("   Note: Phi Ground is free and runs locally, no API key needed")
    print("   Model: microsoft/Phi-3-vision-128k-instruct")
    print("   Status: ‚úÖ Ready to use")
    print()
    
    # Distributed Setup Configuration
    print("üåê Distributed Setup Configuration")
    print("   Local ADB Server: http://YOUR_LAPTOP_IP:8000")
    print("   RunPod Configuration: Use RUNPOD_SETUP_GUIDE.md")
    print()
    
    # Write to .env file
    print("üíæ Saving configuration...")
    
    env_content = []
    env_content.append("# AA_VA-Phi Configuration")
    env_content.append("# Generated by setup_api_keys.py")
    env_content.append("")
    
    # Add API keys
    for key, value in api_keys.items():
        if value:  # Only add non-empty values
            env_content.append(f"{key}={value}")
    
    # Add default configuration
    env_content.append("")
    env_content.append("# Default Configuration")
    env_content.append("OPENAI_MODEL=gpt-4")
    env_content.append("OPENAI_MAX_TOKENS=2000")
    env_content.append("OPENAI_TEMPERATURE=0.7")
    env_content.append("")
    env_content.append("USE_PHI_GROUND=true")
    env_content.append("PHI_GROUND_MODEL=microsoft/Phi-3-vision-128k-instruct")
    env_content.append("PHI_GROUND_TEMPERATURE=0.7")
    env_content.append("PHI_GROUND_MAX_TOKENS=256")
    env_content.append("")
    env_content.append("# Distributed Setup")
    env_content.append("LOCAL_ADB_HOST=127.0.0.1")
    env_content.append("LOCAL_ADB_PORT=8000")
    env_content.append("")
    env_content.append("# Framework Configuration")
    env_content.append("LOG_LEVEL=INFO")
    env_content.append("DEBUG_MODE=false")
    env_content.append("SAVE_SCREENSHOTS=true")
    
    # Write to file
    with open(env_file, 'w') as f:
        f.write('\n'.join(env_content))
    
    print(f"‚úÖ Configuration saved to: {env_file}")
    print()
    
    # Summary
    print("üìã Configuration Summary:")
    print(f"   OpenAI API Key: {'‚úÖ Set' if api_keys.get('OPENAI_API_KEY') else '‚ùå Not set'}")
    print(f"   Phi Ground: ‚úÖ Ready (free, local)")
    print(f"   Distributed Setup: üìñ See RUNPOD_SETUP_GUIDE.md")
    print()
    
    if api_keys.get('OPENAI_API_KEY'):
        print("üéâ Setup complete! You can now run:")
        print("   python scripts/quick_start_distributed.py --local-ip YOUR_LAPTOP_IP")
    else:
        print("‚ö†Ô∏è  No OpenAI API key set. You can still use:")
        print("   - Phi Ground (free, local AI)")
        print("   - Basic device operations")
        print("   - Screenshot capture and analysis")
        print()
        print("   To add API keys later, run this script again.")
    
    print()
    print("üìñ For more information, see:")
    print("   - RUNPOD_SETUP_GUIDE.md")
    print("   - DISTRIBUTED_SETUP_GUIDE.md")
    print("   - TESTING_GUIDE.md")

def main():
    """Main function."""
    
    try:
        create_env_file()
        return 0
    except KeyboardInterrupt:
        print("\n\n‚ùå Setup cancelled by user.")
        return 1
    except Exception as e:
        print(f"\n‚ùå Error during setup: {e}")
        return 1

if __name__ == "__main__":
    exit(main())
